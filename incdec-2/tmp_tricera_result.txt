SAFE

Inferred ACSL annotations
================================================================================
----- Applying PointerPropProcessor to precondition of decrement
----- Precondition: 
(EX Heap. EX EX Heap. EX ((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _4)) & (_7 = newAddr(alloc(_1[Heap], O_Int(_0))))) & ((HeapObject_ctor(read(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)) = write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5))))) & (newAddr(alloc(_3[Heap], O_Int(_2))) = newAddr(alloc(_1[Heap], O_Int(_0)))))) & (_3 = _2))
Result: 
None
----- Applying PointerPropProcessor to postcondition of decrement
----- Postcondition: 
(((((HeapObject_ctor(read(_0, _3)) = 0) & (write(_0, _3, O_Int((-1 + getInt(read(_0, _3))))) = _4)) & EX Heap. EX EX Heap. EX ((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _4)) & (_7 = newAddr(alloc(_1[Heap], O_Int(_0))))) & ((HeapObject_ctor(read(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)) = write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9))))) & (newAddr(alloc(_3[Heap], O_Int(_2))) = newAddr(alloc(_1[Heap], O_Int(_0))))))) & (_3 = _6)) & ((_5 = _1) & (_3 = _2)))
----- Result: 
None
----- Applying AssignmentProcessor to precondition of decrement
----- Precondition: 
(EX Heap. EX EX Heap. EX ((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _4)) & (_7 = newAddr(alloc(_1[Heap], O_Int(_0))))) & ((HeapObject_ctor(read(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)) = write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5))))) & (newAddr(alloc(_3[Heap], O_Int(_2))) = newAddr(alloc(_1[Heap], O_Int(_0)))))) & (_3 = _2))
----- Result: 
None
----- Applying AssignmentProcessor to postcondition of decrement
----- Postcondition: 
(((((HeapObject_ctor(read(_0, _3)) = 0) & (write(_0, _3, O_Int((-1 + getInt(read(_0, _3))))) = _4)) & EX Heap. EX EX Heap. EX ((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _4)) & (_7 = newAddr(alloc(_1[Heap], O_Int(_0))))) & ((HeapObject_ctor(read(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)) = write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9))))) & (newAddr(alloc(_3[Heap], O_Int(_2))) = newAddr(alloc(_1[Heap], O_Int(_0))))))) & (_3 = _6)) & ((_5 = _1) & (_3 = _2)))
----- Result: 
Some((getInt(read(_4, _3)) = getInt(O_Int((-1 + getInt(read(_0, _3)))))))
----- Applying tricera.postprocessor.PostconditionSimplifier$@2cd4e16a to decrement.
----- Precondition: 
(EX Heap. EX EX Heap. EX ((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _4)) & (_7 = newAddr(alloc(_1[Heap], O_Int(_0))))) & ((HeapObject_ctor(read(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)) = write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5))))) & (newAddr(alloc(_3[Heap], O_Int(_2))) = newAddr(alloc(_1[Heap], O_Int(_0)))))) & (_3 = _2))
----- New Precondition: 
(EX Heap. EX EX Heap. EX ((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _4)) & (_7 = newAddr(alloc(_1[Heap], O_Int(_0))))) & ((HeapObject_ctor(read(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)) = write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5))))) & (newAddr(alloc(_3[Heap], O_Int(_2))) = newAddr(alloc(_1[Heap], O_Int(_0)))))) & (_3 = _2))
----- Postcondition: 
(((((HeapObject_ctor(read(_0, _3)) = 0) & (write(_0, _3, O_Int((-1 + getInt(read(_0, _3))))) = _4)) & EX Heap. EX EX Heap. EX ((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _4)) & (_7 = newAddr(alloc(_1[Heap], O_Int(_0))))) & ((HeapObject_ctor(read(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)) = write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9))))) & (newAddr(alloc(_3[Heap], O_Int(_2))) = newAddr(alloc(_1[Heap], O_Int(_0))))))) & (_3 = _6)) & ((_5 = _1) & (_3 = _2)))
----- New Postcondition: 
(((((HeapObject_ctor(read(_0, _3)) = 0) & (write(_0, _3, O_Int((-1 + getInt(read(_0, _3))))) = _4)) & EX Heap. EX EX Heap. EX ((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _4)) & (_7 = newAddr(alloc(_1[Heap], O_Int(_0))))) & ((HeapObject_ctor(read(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)) = write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9))))) & (newAddr(alloc(_3[Heap], O_Int(_2))) = newAddr(alloc(_1[Heap], O_Int(_0))))))) & (_3 = _6)) & ((_5 = _1) & (_3 = _2)))

----- Applying tricera.postprocessor.TheoryOfHeapProcessor$@1378eea2 to decrement.
----- Precondition: 
(EX Heap. EX EX Heap. EX ((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _4)) & (_7 = newAddr(alloc(_1[Heap], O_Int(_0))))) & ((HeapObject_ctor(read(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)) = write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5))))) & (newAddr(alloc(_3[Heap], O_Int(_2))) = newAddr(alloc(_1[Heap], O_Int(_0)))))) & (_3 = _2))
----- New Precondition: 
(EX Heap. EX EX Heap. EX ((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _4)) & (_7 = newAddr(alloc(_1[Heap], O_Int(_0))))) & ((HeapObject_ctor(read(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)) = write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5))))) & (newAddr(alloc(_3[Heap], O_Int(_2))) = newAddr(alloc(_1[Heap], O_Int(_0)))))) & (_3 = _2))
----- Postcondition: 
((((((HeapObject_ctor(read(_0, _3)) = 0) & (write(_0, _3, O_Int((-1 + getInt(read(_0, _3))))) = _4)) & EX Heap. EX EX Heap. EX ((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _4)) & (_7 = newAddr(alloc(_1[Heap], O_Int(_0))))) & ((HeapObject_ctor(read(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)) = write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9))))) & (newAddr(alloc(_3[Heap], O_Int(_2))) = newAddr(alloc(_1[Heap], O_Int(_0))))))) & (_3 = _6)) & ((_5 = _1) & (_3 = _2))) & (getInt(read(_4, _3)) = getInt(O_Int((-1 + getInt(read(_0, _3)))))))
----- New Postcondition: 
((((((HeapObject_ctor(read(_0, _3)) = 0) & (write(_0, _3, O_Int((-1 + getInt(read(_0, _3))))) = _4)) & EX Heap. EX EX Heap. EX ((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _4)) & (_7 = newAddr(alloc(_1[Heap], O_Int(_0))))) & ((HeapObject_ctor(read(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)) = write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9))))) & (newAddr(alloc(_3[Heap], O_Int(_2))) = newAddr(alloc(_1[Heap], O_Int(_0))))))) & (_3 = _6)) & ((_5 = _1) & (_3 = _2))) & (getInt(read(_4, _3)) = (-1 + getInt(read(_0, _3)))))

----- Applying tricera.postprocessor.ADTSimplifier$@3728a578 to decrement.
----- Precondition: 
(EX Heap. EX EX Heap. EX ((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _4)) & (_7 = newAddr(alloc(_1[Heap], O_Int(_0))))) & ((HeapObject_ctor(read(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)) = write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5))))) & (newAddr(alloc(_3[Heap], O_Int(_2))) = newAddr(alloc(_1[Heap], O_Int(_0)))))) & (_3 = _2))
----- New Precondition: 
(EX Heap. EX EX Heap. EX ((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _4)) & (_7 = newAddr(alloc(_1[Heap], O_Int(_0))))) & ((HeapObject_ctor(read(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)) = write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5))))) & (newAddr(alloc(_3[Heap], O_Int(_2))) = newAddr(alloc(_1[Heap], O_Int(_0)))))) & (_3 = _2))
----- Postcondition: 
((((((HeapObject_ctor(read(_0, _3)) = 0) & (write(_0, _3, O_Int((-1 + getInt(read(_0, _3))))) = _4)) & EX Heap. EX EX Heap. EX ((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _4)) & (_7 = newAddr(alloc(_1[Heap], O_Int(_0))))) & ((HeapObject_ctor(read(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)) = write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9))))) & (newAddr(alloc(_3[Heap], O_Int(_2))) = newAddr(alloc(_1[Heap], O_Int(_0))))))) & (_3 = _6)) & ((_5 = _1) & (_3 = _2))) & (getInt(read(_4, _3)) = (-1 + getInt(read(_0, _3)))))
----- New Postcondition: 
((((((HeapObject_ctor(read(_0, _3)) = 0) & (write(_0, _3, O_Int((-1 + getInt(read(_0, _3))))) = _4)) & EX Heap. EX EX Heap. EX ((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _4)) & (_7 = newAddr(alloc(_1[Heap], O_Int(_0))))) & ((HeapObject_ctor(read(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)) = write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9))))) & (newAddr(alloc(_3[Heap], O_Int(_2))) = newAddr(alloc(_1[Heap], O_Int(_0))))))) & (_3 = _6)) & ((_5 = _1) & (_3 = _2))) & (getInt(read(_4, _3)) = (-1 + getInt(read(_0, _3)))))

----- Applying tricera.postprocessor.ADTExploder$@1a464fa3 to decrement.
----- Precondition: 
(EX Heap. EX EX Heap. EX ((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _4)) & (_7 = newAddr(alloc(_1[Heap], O_Int(_0))))) & ((HeapObject_ctor(read(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)) = write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5))))) & (newAddr(alloc(_3[Heap], O_Int(_2))) = newAddr(alloc(_1[Heap], O_Int(_0)))))) & (_3 = _2))
----- New Precondition: 
(EX Heap. EX EX Heap. EX ((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _4)) & (_7 = newAddr(alloc(_1[Heap], O_Int(_0))))) & ((HeapObject_ctor(read(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)) = write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5))))) & (newAddr(alloc(_3[Heap], O_Int(_2))) = newAddr(alloc(_1[Heap], O_Int(_0)))))) & (_3 = _2))
----- Postcondition: 
((((((HeapObject_ctor(read(_0, _3)) = 0) & (write(_0, _3, O_Int((-1 + getInt(read(_0, _3))))) = _4)) & EX Heap. EX EX Heap. EX ((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _4)) & (_7 = newAddr(alloc(_1[Heap], O_Int(_0))))) & ((HeapObject_ctor(read(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)) = write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9))))) & (newAddr(alloc(_3[Heap], O_Int(_2))) = newAddr(alloc(_1[Heap], O_Int(_0))))))) & (_3 = _6)) & ((_5 = _1) & (_3 = _2))) & (getInt(read(_4, _3)) = (-1 + getInt(read(_0, _3)))))
----- New Postcondition: 
((((((HeapObject_ctor(read(_0, _3)) = 0) & (write(_0, _3, O_Int((-1 + getInt(read(_0, _3))))) = _4)) & EX Heap. EX EX Heap. EX ((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _4)) & (_7 = newAddr(alloc(_1[Heap], O_Int(_0))))) & ((HeapObject_ctor(read(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)) = write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9))))) & (newAddr(alloc(_3[Heap], O_Int(_2))) = newAddr(alloc(_1[Heap], O_Int(_0))))))) & (_3 = _6)) & ((_5 = _1) & (_3 = _2))) & (getInt(read(_4, _3)) = (-1 + getInt(read(_0, _3)))))

----- Applying tricera.postprocessor.ToVariableForm$@4215e133 to decrement.
----- Precondition: 
(EX Heap. EX EX Heap. EX ((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _4)) & (_7 = newAddr(alloc(_1[Heap], O_Int(_0))))) & ((HeapObject_ctor(read(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)) = write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5))))) & (newAddr(alloc(_3[Heap], O_Int(_2))) = newAddr(alloc(_1[Heap], O_Int(_0)))))) & (_3 = _2))
----- New Precondition: 
(EX Heap. EX EX Heap. EX ((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _4)) & (_7 = newAddr(alloc(_1[Heap], O_Int(_0))))) & ((HeapObject_ctor(read(newHeap(alloc(_3[Heap], O_Int(_7))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(newHeap(alloc(_3[Heap], O_Int(_7))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)) = write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5))))) & (newAddr(alloc(_3[Heap], O_Int(_7))) = newAddr(alloc(_1[Heap], O_Int(_0)))))) & (_3 = _2))
----- Postcondition: 
((((((HeapObject_ctor(read(_0, _3)) = 0) & (write(_0, _3, O_Int((-1 + getInt(read(_0, _3))))) = _4)) & EX Heap. EX EX Heap. EX ((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _4)) & (_7 = newAddr(alloc(_1[Heap], O_Int(_0))))) & ((HeapObject_ctor(read(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(newHeap(alloc(_3[Heap], O_Int(_2))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)) = write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9))))) & (newAddr(alloc(_3[Heap], O_Int(_2))) = newAddr(alloc(_1[Heap], O_Int(_0))))))) & (_3 = _6)) & ((_5 = _1) & (_3 = _2))) & (getInt(read(_4, _3)) = (-1 + getInt(read(_0, _3)))))
----- New Postcondition: 
((((((HeapObject_ctor(read(_0, _3)) = 0) & (_4 = _4)) & EX Heap. EX EX Heap. EX ((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _4)) & (_7 = newAddr(alloc(_1[Heap], O_Int(_0))))) & ((HeapObject_ctor(read(newHeap(alloc(_3[Heap], O_Int(_7))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(newHeap(alloc(_3[Heap], O_Int(_7))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)) = write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9))))) & (newAddr(alloc(_3[Heap], O_Int(_7))) = newAddr(alloc(_1[Heap], O_Int(_0))))))) & (_3 = _6)) & ((_5 = _1) & (_3 = _2))) & (getInt(read(_4, _3)) = (-1 + getInt(read(_0, _3)))))

----- Applying tricera.postprocessor.ACSLExpressionProcessor$@1f43cab7 to decrement.
----- Precondition: 
(EX Heap. EX EX Heap. EX ((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _4)) & (_7 = newAddr(alloc(_1[Heap], O_Int(_0))))) & ((HeapObject_ctor(read(newHeap(alloc(_3[Heap], O_Int(_7))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(newHeap(alloc(_3[Heap], O_Int(_7))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)) = write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5))))) & (newAddr(alloc(_3[Heap], O_Int(_7))) = newAddr(alloc(_1[Heap], O_Int(_0)))))) & (_3 = _2))
----- New Precondition: 
(EX Heap. EX EX Heap. EX ((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _4)) & (_7 = newAddr(alloc(_1[Heap], O_Int(_0))))) & ((HeapObject_ctor(read(newHeap(alloc(_3[Heap], O_Int(_7))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(newHeap(alloc(_3[Heap], O_Int(_7))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)) = write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5))))) & (newAddr(alloc(_3[Heap], O_Int(_7))) = newAddr(alloc(_1[Heap], O_Int(_0)))))) & (_3 = _2))
----- Postcondition: 
((((((HeapObject_ctor(read(_0, _3)) = 0) & (_4 = _4)) & EX Heap. EX EX Heap. EX ((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _4)) & (_7 = newAddr(alloc(_1[Heap], O_Int(_0))))) & ((HeapObject_ctor(read(newHeap(alloc(_3[Heap], O_Int(_7))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(newHeap(alloc(_3[Heap], O_Int(_7))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)) = write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9))))) & (newAddr(alloc(_3[Heap], O_Int(_7))) = newAddr(alloc(_1[Heap], O_Int(_0))))))) & (_3 = _6)) & ((_5 = _1) & (_3 = _2))) & (getInt(read(_4, _3)) = (-1 + getInt(read(_0, _3)))))
----- New Postcondition: 
((((((HeapObject_ctor(read(_0, _3)) = 0) & (_4 = _4)) & EX Heap. EX EX Heap. EX ((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _4)) & (_7 = newAddr(alloc(_1[Heap], O_Int(_0))))) & ((HeapObject_ctor(read(newHeap(alloc(_3[Heap], O_Int(_7))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(newHeap(alloc(_3[Heap], O_Int(_7))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)) = write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9))))) & (newAddr(alloc(_3[Heap], O_Int(_7))) = newAddr(alloc(_1[Heap], O_Int(_0))))))) & (_3 = _6)) & ((_5 = _1) & (_3 = _2))) & (deref(val) = (-1 + oldDeref(val))))

----- Applying tricera.postprocessor.ClauseRemover$@ca8ef3a to decrement.
----- Precondition: 
(EX Heap. EX EX Heap. EX ((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _4)) & (_7 = newAddr(alloc(_1[Heap], O_Int(_0))))) & ((HeapObject_ctor(read(newHeap(alloc(_3[Heap], O_Int(_7))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(newHeap(alloc(_3[Heap], O_Int(_7))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5)) = write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_5))))) & (newAddr(alloc(_3[Heap], O_Int(_7))) = newAddr(alloc(_1[Heap], O_Int(_0)))))) & (_3 = _2))
----- New Precondition: 
(_3 = _2)
----- Postcondition: 
((((((HeapObject_ctor(read(_0, _3)) = 0) & (_4 = _4)) & EX Heap. EX EX Heap. EX ((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _4)) & (_7 = newAddr(alloc(_1[Heap], O_Int(_0))))) & ((HeapObject_ctor(read(newHeap(alloc(_3[Heap], O_Int(_7))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(newHeap(alloc(_3[Heap], O_Int(_7))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9)) = write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_9))))) & (newAddr(alloc(_3[Heap], O_Int(_7))) = newAddr(alloc(_1[Heap], O_Int(_0))))))) & (_3 = _6)) & ((_5 = _1) & (_3 = _2))) & (deref(val) = (-1 + oldDeref(val))))
----- New Postcondition: 
(((_3 = _6) & ((_5 = _1) & (_3 = _2))) & (deref(val) = (-1 + oldDeref(val))))

----- Applying ACSLLineariser to precondition: 
(_3 = _2)
----- Result: 
 _3 == _2
----- Applying ACSLLineariser to postcondition: 
(((_3 = _6) & ((_5 = _1) & (_3 = _2))) & (deref(val) = (-1 + oldDeref(val))))
----- Result: 
 _3 == _6 && _5 == _1 && _3 == _2 && *val == \old(*val) - 1
/* contracts for decrement */
/*@
  requires val == a;
  ensures \old(val) == a && a_init == \old(a_init) && \old(val) == \old(a) && *val == \old(*val) - 1;
*/
----- Applying PointerPropProcessor to precondition of increment
----- Precondition: 
(EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), _5)) = 0) & (write(newHeap(alloc(_1[Heap], O_Int(_0))), _5, O_Int(_3)) = _2)) & (newAddr(alloc(_1[Heap], O_Int(_0))) = _5)) & (_3 = _2))
Result: 
Some(\valid(val))
----- Applying PointerPropProcessor to postcondition of increment
----- Postcondition: 
(((((HeapObject_ctor(read(_0, _3)) = 0) & (write(_0, _3, O_Int((1 + getInt(read(_0, _3))))) = _4)) & EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), _5)) = 0) & (write(newHeap(alloc(_1[Heap], O_Int(_0))), _5, O_Int(_7)) = _2)) & (newAddr(alloc(_1[Heap], O_Int(_0))) = _5))) & (_3 = _6)) & ((_5 = _1) & (_3 = _2)))
----- Result: 
Some(\valid(val))
----- Applying AssignmentProcessor to precondition of increment
----- Precondition: 
(EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), _5)) = 0) & (write(newHeap(alloc(_1[Heap], O_Int(_0))), _5, O_Int(_3)) = _2)) & (newAddr(alloc(_1[Heap], O_Int(_0))) = _5)) & (_3 = _2))
----- Result: 
None
----- Applying AssignmentProcessor to postcondition of increment
----- Postcondition: 
(((((HeapObject_ctor(read(_0, _3)) = 0) & (write(_0, _3, O_Int((1 + getInt(read(_0, _3))))) = _4)) & EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), _5)) = 0) & (write(newHeap(alloc(_1[Heap], O_Int(_0))), _5, O_Int(_7)) = _2)) & (newAddr(alloc(_1[Heap], O_Int(_0))) = _5))) & (_3 = _6)) & ((_5 = _1) & (_3 = _2)))
----- Result: 
Some((getInt(read(_4, _3)) = getInt(O_Int((1 + getInt(read(_0, _3)))))))
----- Applying tricera.postprocessor.PostconditionSimplifier$@2cd4e16a to increment.
----- Precondition: 
(EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), _5)) = 0) & (write(newHeap(alloc(_1[Heap], O_Int(_0))), _5, O_Int(_3)) = _2)) & (newAddr(alloc(_1[Heap], O_Int(_0))) = _5)) & (_3 = _2))
----- New Precondition: 
(EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), _5)) = 0) & (write(newHeap(alloc(_1[Heap], O_Int(_0))), _5, O_Int(_3)) = _2)) & (newAddr(alloc(_1[Heap], O_Int(_0))) = _5)) & (_3 = _2))
----- Postcondition: 
(((((HeapObject_ctor(read(_0, _3)) = 0) & (write(_0, _3, O_Int((1 + getInt(read(_0, _3))))) = _4)) & EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), _5)) = 0) & (write(newHeap(alloc(_1[Heap], O_Int(_0))), _5, O_Int(_7)) = _2)) & (newAddr(alloc(_1[Heap], O_Int(_0))) = _5))) & (_3 = _6)) & ((_5 = _1) & (_3 = _2)))
----- New Postcondition: 
((((HeapObject_ctor(read(_0, _3)) = 0) & (write(_0, _3, O_Int((1 + getInt(read(_0, _3))))) = _4)) & (_3 = _6)) & (_5 = _1))

----- Applying tricera.postprocessor.TheoryOfHeapProcessor$@1378eea2 to increment.
----- Precondition: 
((EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), _5)) = 0) & (write(newHeap(alloc(_1[Heap], O_Int(_0))), _5, O_Int(_3)) = _2)) & (newAddr(alloc(_1[Heap], O_Int(_0))) = _5)) & (_3 = _2)) & \valid(val))
----- New Precondition: 
((EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), _5)) = 0) & (write(newHeap(alloc(_1[Heap], O_Int(_0))), _5, O_Int(_3)) = _2)) & (newAddr(alloc(_1[Heap], O_Int(_0))) = _5)) & (_3 = _2)) & \valid(val))
----- Postcondition: 
((((((HeapObject_ctor(read(_0, _3)) = 0) & (write(_0, _3, O_Int((1 + getInt(read(_0, _3))))) = _4)) & (_3 = _6)) & (_5 = _1)) & \valid(val)) & (getInt(read(_4, _3)) = getInt(O_Int((1 + getInt(read(_0, _3)))))))
----- New Postcondition: 
((((((HeapObject_ctor(read(_0, _3)) = 0) & (write(_0, _3, O_Int((1 + getInt(read(_0, _3))))) = _4)) & (_3 = _6)) & (_5 = _1)) & \valid(val)) & (getInt(read(_4, _3)) = (1 + getInt(read(_0, _3)))))

----- Applying tricera.postprocessor.ADTSimplifier$@3728a578 to increment.
----- Precondition: 
((EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), _5)) = 0) & (write(newHeap(alloc(_1[Heap], O_Int(_0))), _5, O_Int(_3)) = _2)) & (newAddr(alloc(_1[Heap], O_Int(_0))) = _5)) & (_3 = _2)) & \valid(val))
----- New Precondition: 
((EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), _5)) = 0) & (write(newHeap(alloc(_1[Heap], O_Int(_0))), _5, O_Int(_3)) = _2)) & (newAddr(alloc(_1[Heap], O_Int(_0))) = _5)) & (_3 = _2)) & \valid(val))
----- Postcondition: 
((((((HeapObject_ctor(read(_0, _3)) = 0) & (write(_0, _3, O_Int((1 + getInt(read(_0, _3))))) = _4)) & (_3 = _6)) & (_5 = _1)) & \valid(val)) & (getInt(read(_4, _3)) = (1 + getInt(read(_0, _3)))))
----- New Postcondition: 
((((((HeapObject_ctor(read(_0, _3)) = 0) & (write(_0, _3, O_Int((1 + getInt(read(_0, _3))))) = _4)) & (_3 = _6)) & (_5 = _1)) & \valid(val)) & (getInt(read(_4, _3)) = (1 + getInt(read(_0, _3)))))

----- Applying tricera.postprocessor.ADTExploder$@1a464fa3 to increment.
----- Precondition: 
((EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), _5)) = 0) & (write(newHeap(alloc(_1[Heap], O_Int(_0))), _5, O_Int(_3)) = _2)) & (newAddr(alloc(_1[Heap], O_Int(_0))) = _5)) & (_3 = _2)) & \valid(val))
----- New Precondition: 
((EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), _5)) = 0) & (write(newHeap(alloc(_1[Heap], O_Int(_0))), _5, O_Int(_3)) = _2)) & (newAddr(alloc(_1[Heap], O_Int(_0))) = _5)) & (_3 = _2)) & \valid(val))
----- Postcondition: 
((((((HeapObject_ctor(read(_0, _3)) = 0) & (write(_0, _3, O_Int((1 + getInt(read(_0, _3))))) = _4)) & (_3 = _6)) & (_5 = _1)) & \valid(val)) & (getInt(read(_4, _3)) = (1 + getInt(read(_0, _3)))))
----- New Postcondition: 
((((((HeapObject_ctor(read(_0, _3)) = 0) & (write(_0, _3, O_Int((1 + getInt(read(_0, _3))))) = _4)) & (_3 = _6)) & (_5 = _1)) & \valid(val)) & (getInt(read(_4, _3)) = (1 + getInt(read(_0, _3)))))

----- Applying tricera.postprocessor.ToVariableForm$@4215e133 to increment.
----- Precondition: 
((EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), _5)) = 0) & (write(newHeap(alloc(_1[Heap], O_Int(_0))), _5, O_Int(_3)) = _2)) & (newAddr(alloc(_1[Heap], O_Int(_0))) = _5)) & (_3 = _2)) & \valid(val))
----- New Precondition: 
((EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), _5)) = 0) & (write(newHeap(alloc(_1[Heap], O_Int(_0))), _5, O_Int(_3)) = _2)) & (newAddr(alloc(_1[Heap], O_Int(_0))) = _5)) & (_3 = _2)) & \valid(val))
----- Postcondition: 
((((((HeapObject_ctor(read(_0, _3)) = 0) & (write(_0, _3, O_Int((1 + getInt(read(_0, _3))))) = _4)) & (_3 = _6)) & (_5 = _1)) & \valid(val)) & (getInt(read(_4, _3)) = (1 + getInt(read(_0, _3)))))
----- New Postcondition: 
((((((HeapObject_ctor(read(_0, _3)) = 0) & (_4 = _4)) & (_3 = _6)) & (_5 = _1)) & \valid(val)) & (getInt(read(_4, _3)) = (1 + getInt(read(_0, _3)))))

----- Applying tricera.postprocessor.ACSLExpressionProcessor$@1f43cab7 to increment.
----- Precondition: 
((EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), _5)) = 0) & (write(newHeap(alloc(_1[Heap], O_Int(_0))), _5, O_Int(_3)) = _2)) & (newAddr(alloc(_1[Heap], O_Int(_0))) = _5)) & (_3 = _2)) & \valid(val))
----- New Precondition: 
((EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), _5)) = 0) & (write(newHeap(alloc(_1[Heap], O_Int(_0))), _5, O_Int(_3)) = _2)) & (newAddr(alloc(_1[Heap], O_Int(_0))) = _5)) & (_3 = _2)) & \valid(val))
----- Postcondition: 
((((((HeapObject_ctor(read(_0, _3)) = 0) & (_4 = _4)) & (_3 = _6)) & (_5 = _1)) & \valid(val)) & (getInt(read(_4, _3)) = (1 + getInt(read(_0, _3)))))
----- New Postcondition: 
((((((HeapObject_ctor(read(_0, _3)) = 0) & (_4 = _4)) & (_3 = _6)) & (_5 = _1)) & \valid(val)) & (deref(val) = (1 + oldDeref(val))))

----- Applying tricera.postprocessor.ClauseRemover$@ca8ef3a to increment.
----- Precondition: 
((EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), _5)) = 0) & (write(newHeap(alloc(_1[Heap], O_Int(_0))), _5, O_Int(_3)) = _2)) & (newAddr(alloc(_1[Heap], O_Int(_0))) = _5)) & (_3 = _2)) & \valid(val))
----- New Precondition: 
((_3 = _2) & \valid(val))
----- Postcondition: 
((((((HeapObject_ctor(read(_0, _3)) = 0) & (_4 = _4)) & (_3 = _6)) & (_5 = _1)) & \valid(val)) & (deref(val) = (1 + oldDeref(val))))
----- New Postcondition: 
((((_3 = _6) & (_5 = _1)) & \valid(val)) & (deref(val) = (1 + oldDeref(val))))

----- Applying ACSLLineariser to precondition: 
((_3 = _2) & \valid(val))
----- Result: 
 _3 == _2 && \valid(val)
----- Applying ACSLLineariser to postcondition: 
((((_3 = _6) & (_5 = _1)) & \valid(val)) & (deref(val) = (1 + oldDeref(val))))
----- Result: 
 _3 == _6 && _5 == _1 && \valid(val) && *val == 1 + \old(*val)
/* contracts for increment */
/*@
  requires val == a && \valid(val);
  ensures \old(val) == a && a_init == \old(a_init) && \valid(val) && *val == 1 + \old(*val);
*/
================================================================================

