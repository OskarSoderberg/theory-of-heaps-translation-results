SAFE

Inferred ACSL annotations
================================================================================
----- Applying PointerPropProcessor to precondition of decrement
----- Precondition: 
((EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _2)) & (_6 = newAddr(alloc(_1[Heap], O_Int(_0)))))) & ((((-1 + counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)))) >= 0) & ((-1 + newAddr(alloc(_1[Heap], O_Int(_0)))) >= 0)) & ((O_Int(_3) = read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3))))) & (HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0)))) | EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _2)) & (_6 = newAddr(alloc(_1[Heap], O_Int(_0)))))) & ((((-1 + counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)))) >= 0) & ((-1 + newAddr(alloc(_1[Heap], O_Int(_0)))) >= 0)) & (!(O_Int(_3) = read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3))))) & (HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0))))) & (_4 = _3))
Result: 
Some(\valid(val))
----- Applying PointerPropProcessor to postcondition of decrement
----- Postcondition: 
(((EX Heap. (((HeapObject_ctor(read(_0[Heap], counterAddr(_1))) = 0) & (write(_0[Heap], counterAddr(_1), O_Int((-2 + getInt(read(_0[Heap], counterAddr(_1)))))) = _6)) & (((counterAddr(_0[Heap]) = counterAddr(_1)) & ((-1 + counterAddr(_1)) >= 0)) & ((HeapObject_ctor(read(_0[Heap], counterAddr(_1))) = 0) & (getInt(read(_0[Heap], counterAddr(_1))) = (1 + getInt(read(_1, counterAddr(_1)))))))) & (counterAddr(_0) = _8)) & (counterAddr(_0) = _3)) & (((_6 = _1) & (_7 = _2)) & (counterAddr(_0) = _4)))
----- Result: 
None
----- Applying AssignmentProcessor to precondition of decrement
----- Precondition: 
((EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _2)) & (_6 = newAddr(alloc(_1[Heap], O_Int(_0)))))) & ((((-1 + counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)))) >= 0) & ((-1 + newAddr(alloc(_1[Heap], O_Int(_0)))) >= 0)) & ((O_Int(_3) = read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3))))) & (HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0)))) | EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _2)) & (_6 = newAddr(alloc(_1[Heap], O_Int(_0)))))) & ((((-1 + counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)))) >= 0) & ((-1 + newAddr(alloc(_1[Heap], O_Int(_0)))) >= 0)) & (!(O_Int(_3) = read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3))))) & (HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0))))) & (_4 = _3))
----- Result: 
None
----- Applying AssignmentProcessor to postcondition of decrement
----- Postcondition: 
(((EX Heap. (((HeapObject_ctor(read(_0[Heap], counterAddr(_1))) = 0) & (write(_0[Heap], counterAddr(_1), O_Int((-2 + getInt(read(_0[Heap], counterAddr(_1)))))) = _6)) & (((counterAddr(_0[Heap]) = counterAddr(_1)) & ((-1 + counterAddr(_1)) >= 0)) & ((HeapObject_ctor(read(_0[Heap], counterAddr(_1))) = 0) & (getInt(read(_0[Heap], counterAddr(_1))) = (1 + getInt(read(_1, counterAddr(_1)))))))) & (counterAddr(_0) = _8)) & (counterAddr(_0) = _3)) & (((_6 = _1) & (_7 = _2)) & (counterAddr(_0) = _4)))
----- Result: 
None
----- Applying tricera.postprocessor.PostconditionSimplifier$@66713605 to decrement.
----- Precondition: 
((EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _2)) & (_6 = newAddr(alloc(_1[Heap], O_Int(_0)))))) & ((((-1 + counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)))) >= 0) & ((-1 + newAddr(alloc(_1[Heap], O_Int(_0)))) >= 0)) & ((getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3))))) = _3) & (HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0)))) | EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _2)) & (_6 = newAddr(alloc(_1[Heap], O_Int(_0)))))) & ((((-1 + counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)))) >= 0) & ((-1 + newAddr(alloc(_1[Heap], O_Int(_0)))) >= 0)) & (!(getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3))))) = _3) & (HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0))))) & (_4 = _3))
----- New Precondition: 
((EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _2)) & (_6 = newAddr(alloc(_1[Heap], O_Int(_0)))))) & ((((-1 + counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)))) >= 0) & ((-1 + newAddr(alloc(_1[Heap], O_Int(_0)))) >= 0)) & ((getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3))))) = _3) & (HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0)))) | EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _2)) & (_6 = newAddr(alloc(_1[Heap], O_Int(_0)))))) & ((((-1 + counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)))) >= 0) & ((-1 + newAddr(alloc(_1[Heap], O_Int(_0)))) >= 0)) & (!(getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3))))) = _3) & (HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0))))) & (_4 = _3))
----- Postcondition: 
(((EX Heap. (((HeapObject_ctor(read(_0[Heap], counterAddr(_1))) = 0) & (write(_0[Heap], counterAddr(_1), O_Int((-2 + getInt(read(_0[Heap], counterAddr(_1)))))) = _6)) & (((counterAddr(_0[Heap]) = counterAddr(_1)) & ((-1 + counterAddr(_1)) >= 0)) & ((HeapObject_ctor(read(_0[Heap], counterAddr(_1))) = 0) & (getInt(read(_0[Heap], counterAddr(_1))) = (1 + getInt(read(_1, counterAddr(_1)))))))) & (counterAddr(_0) = _8)) & (counterAddr(_0) = _3)) & (((_6 = _1) & (_7 = _2)) & (counterAddr(_0) = _4)))
----- New Postcondition: 
((EX Heap. ((write(_0[Heap], counterAddr(_1), O_Int((-2 + getInt(read(_0[Heap], counterAddr(_1)))))) = _6) & ((counterAddr(_0[Heap]) = counterAddr(_1)) & ((HeapObject_ctor(read(_0[Heap], counterAddr(_1))) = 0) & (getInt(read(_0[Heap], counterAddr(_1))) = (1 + getInt(read(_1, counterAddr(_1)))))))) & (counterAddr(_0) = _8)) & ((_6 = _1) & (_7 = _2)))

----- Applying tricera.postprocessor.TheoryOfHeapProcessor$@37d699a1 to decrement.
----- Precondition: 
(((EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _2)) & (_6 = newAddr(alloc(_1[Heap], O_Int(_0)))))) & ((((-1 + counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)))) >= 0) & ((-1 + newAddr(alloc(_1[Heap], O_Int(_0)))) >= 0)) & ((getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3))))) = _3) & (HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0)))) | EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _2)) & (_6 = newAddr(alloc(_1[Heap], O_Int(_0)))))) & ((((-1 + counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)))) >= 0) & ((-1 + newAddr(alloc(_1[Heap], O_Int(_0)))) >= 0)) & (!(getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3))))) = _3) & (HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0))))) & (_4 = _3)) & \valid(val))
----- New Precondition: 
(((EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _2)) & (_6 = newAddr(alloc(_1[Heap], O_Int(_0)))))) & ((((-1 + counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)))) >= 0) & ((-1 + newAddr(alloc(_1[Heap], O_Int(_0)))) >= 0)) & ((getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3))))) = _3) & (HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0)))) | EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _2)) & (_6 = newAddr(alloc(_1[Heap], O_Int(_0)))))) & ((((-1 + counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)))) >= 0) & ((-1 + newAddr(alloc(_1[Heap], O_Int(_0)))) >= 0)) & (!(getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3))))) = _3) & (HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0))))) & (_4 = _3)) & \valid(val))
----- Postcondition: 
((EX Heap. ((write(_0[Heap], counterAddr(_1), O_Int((-2 + getInt(read(_0[Heap], counterAddr(_1)))))) = _6) & ((counterAddr(_0[Heap]) = counterAddr(_1)) & ((HeapObject_ctor(read(_0[Heap], counterAddr(_1))) = 0) & (getInt(read(_0[Heap], counterAddr(_1))) = (1 + getInt(read(_1, counterAddr(_1)))))))) & (counterAddr(_0) = _8)) & ((_6 = _1) & (_7 = _2)))
----- New Postcondition: 
((EX Heap. ((write(_0[Heap], counterAddr(_1), O_Int((-2 + getInt(read(_0[Heap], counterAddr(_1)))))) = _6) & ((counterAddr(_0[Heap]) = counterAddr(_1)) & ((HeapObject_ctor(read(_0[Heap], counterAddr(_1))) = 0) & (getInt(read(_0[Heap], counterAddr(_1))) = (1 + getInt(read(_1, counterAddr(_1)))))))) & (counterAddr(_0) = _8)) & ((_6 = _1) & (_7 = _2)))

----- Applying tricera.postprocessor.ADTSimplifier$@267ff4df to decrement.
----- Precondition: 
(((EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _2)) & (_6 = newAddr(alloc(_1[Heap], O_Int(_0)))))) & ((((-1 + counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)))) >= 0) & ((-1 + newAddr(alloc(_1[Heap], O_Int(_0)))) >= 0)) & ((getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3))))) = _3) & (HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0)))) | EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _2)) & (_6 = newAddr(alloc(_1[Heap], O_Int(_0)))))) & ((((-1 + counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)))) >= 0) & ((-1 + newAddr(alloc(_1[Heap], O_Int(_0)))) >= 0)) & (!(getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3))))) = _3) & (HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0))))) & (_4 = _3)) & \valid(val))
----- New Precondition: 
(((EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _2)) & (_6 = newAddr(alloc(_1[Heap], O_Int(_0)))))) & ((((-1 + counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)))) >= 0) & ((-1 + newAddr(alloc(_1[Heap], O_Int(_0)))) >= 0)) & ((getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3))))) = _3) & (HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0)))) | EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _2)) & (_6 = newAddr(alloc(_1[Heap], O_Int(_0)))))) & ((((-1 + counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)))) >= 0) & ((-1 + newAddr(alloc(_1[Heap], O_Int(_0)))) >= 0)) & (!(getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3))))) = _3) & (HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0))))) & (_4 = _3)) & \valid(val))
----- Postcondition: 
((EX Heap. ((write(_0[Heap], counterAddr(_1), O_Int((-2 + getInt(read(_0[Heap], counterAddr(_1)))))) = _6) & ((counterAddr(_0[Heap]) = counterAddr(_1)) & ((HeapObject_ctor(read(_0[Heap], counterAddr(_1))) = 0) & (getInt(read(_0[Heap], counterAddr(_1))) = (1 + getInt(read(_1, counterAddr(_1)))))))) & (counterAddr(_0) = _8)) & ((_6 = _1) & (_7 = _2)))
----- New Postcondition: 
((EX Heap. ((write(_0[Heap], counterAddr(_1), O_Int((-2 + getInt(read(_0[Heap], counterAddr(_1)))))) = _6) & ((counterAddr(_0[Heap]) = counterAddr(_1)) & ((HeapObject_ctor(read(_0[Heap], counterAddr(_1))) = 0) & (getInt(read(_0[Heap], counterAddr(_1))) = (1 + getInt(read(_1, counterAddr(_1)))))))) & (counterAddr(_0) = _8)) & ((_6 = _1) & (_7 = _2)))

----- Applying tricera.postprocessor.ADTExploder$@57a667c8 to decrement.
----- Precondition: 
(((EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _2)) & (_6 = newAddr(alloc(_1[Heap], O_Int(_0)))))) & ((((-1 + counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)))) >= 0) & ((-1 + newAddr(alloc(_1[Heap], O_Int(_0)))) >= 0)) & ((getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3))))) = _3) & (HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0)))) | EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _2)) & (_6 = newAddr(alloc(_1[Heap], O_Int(_0)))))) & ((((-1 + counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)))) >= 0) & ((-1 + newAddr(alloc(_1[Heap], O_Int(_0)))) >= 0)) & (!(getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3))))) = _3) & (HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0))))) & (_4 = _3)) & \valid(val))
----- New Precondition: 
(((EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _2)) & (_6 = newAddr(alloc(_1[Heap], O_Int(_0)))))) & ((((-1 + counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)))) >= 0) & ((-1 + newAddr(alloc(_1[Heap], O_Int(_0)))) >= 0)) & ((getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3))))) = _3) & (HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0)))) | EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _2)) & (_6 = newAddr(alloc(_1[Heap], O_Int(_0)))))) & ((((-1 + counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)))) >= 0) & ((-1 + newAddr(alloc(_1[Heap], O_Int(_0)))) >= 0)) & (!(getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3))))) = _3) & (HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0))))) & (_4 = _3)) & \valid(val))
----- Postcondition: 
((EX Heap. ((write(_0[Heap], counterAddr(_1), O_Int((-2 + getInt(read(_0[Heap], counterAddr(_1)))))) = _6) & ((counterAddr(_0[Heap]) = counterAddr(_1)) & ((HeapObject_ctor(read(_0[Heap], counterAddr(_1))) = 0) & (getInt(read(_0[Heap], counterAddr(_1))) = (1 + getInt(read(_1, counterAddr(_1)))))))) & (counterAddr(_0) = _8)) & ((_6 = _1) & (_7 = _2)))
----- New Postcondition: 
((EX Heap. ((write(_0[Heap], counterAddr(_1), O_Int((-2 + getInt(read(_0[Heap], counterAddr(_1)))))) = _6) & ((counterAddr(_0[Heap]) = counterAddr(_1)) & ((HeapObject_ctor(read(_0[Heap], counterAddr(_1))) = 0) & (getInt(read(_0[Heap], counterAddr(_1))) = (1 + getInt(read(_1, counterAddr(_1)))))))) & (counterAddr(_0) = _8)) & ((_6 = _1) & (_7 = _2)))

----- Applying tricera.postprocessor.ToVariableForm$@712cd5d3 to decrement.
----- Precondition: 
(((EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _2)) & (_6 = newAddr(alloc(_1[Heap], O_Int(_0)))))) & ((((-1 + counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)))) >= 0) & ((-1 + newAddr(alloc(_1[Heap], O_Int(_0)))) >= 0)) & ((getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3))))) = _3) & (HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0)))) | EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _2)) & (_6 = newAddr(alloc(_1[Heap], O_Int(_0)))))) & ((((-1 + counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)))) >= 0) & ((-1 + newAddr(alloc(_1[Heap], O_Int(_0)))) >= 0)) & (!(getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3))))) = _3) & (HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0))))) & (_4 = _3)) & \valid(val))
----- New Precondition: 
(((EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _2)) & (_6 = newAddr(alloc(_1[Heap], O_Int(_0)))))) & ((((-1 + counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)))) >= 0) & ((-1 + newAddr(alloc(_1[Heap], O_Int(_0)))) >= 0)) & ((getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3))))) = _3) & (HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0)))) | EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _2)) & (_6 = newAddr(alloc(_1[Heap], O_Int(_0)))))) & ((((-1 + counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)))) >= 0) & ((-1 + newAddr(alloc(_1[Heap], O_Int(_0)))) >= 0)) & (!(getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3))))) = _3) & (HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0))))) & (_4 = _3)) & \valid(val))
----- Postcondition: 
((EX Heap. ((write(_0[Heap], counterAddr(_1), O_Int((-2 + getInt(read(_0[Heap], counterAddr(_1)))))) = _6) & ((counterAddr(_0[Heap]) = counterAddr(_1)) & ((HeapObject_ctor(read(_0[Heap], counterAddr(_1))) = 0) & (getInt(read(_0[Heap], counterAddr(_1))) = (1 + getInt(read(_1, counterAddr(_1)))))))) & (counterAddr(_0) = _8)) & ((_6 = _1) & (_7 = _2)))
----- New Postcondition: 
((EX Heap. ((write(_0[Heap], _9, O_Int((-2 + getInt(read(_0[Heap], _9))))) = _6) & ((counterAddr(_0[Heap]) = _9) & ((HeapObject_ctor(read(_0[Heap], _9)) = 0) & (getInt(read(_0[Heap], _9)) = (1 + getInt(read(_1, _9))))))) & (counterAddr(_0) = _8)) & ((_6 = _1) & (_7 = _2)))

----- Applying tricera.postprocessor.ACSLExpressionProcessor$@6eda012b to decrement.
----- Precondition: 
(((EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _2)) & (_6 = newAddr(alloc(_1[Heap], O_Int(_0)))))) & ((((-1 + counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)))) >= 0) & ((-1 + newAddr(alloc(_1[Heap], O_Int(_0)))) >= 0)) & ((getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3))))) = _3) & (HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0)))) | EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _2)) & (_6 = newAddr(alloc(_1[Heap], O_Int(_0)))))) & ((((-1 + counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)))) >= 0) & ((-1 + newAddr(alloc(_1[Heap], O_Int(_0)))) >= 0)) & (!(getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3))))) = _3) & (HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0))))) & (_4 = _3)) & \valid(val))
----- New Precondition: 
(((EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _2)) & (_6 = newAddr(alloc(_1[Heap], O_Int(_0)))))) & ((((-1 + counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)))) >= 0) & ((-1 + newAddr(alloc(_1[Heap], O_Int(_0)))) >= 0)) & ((getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3))))) = _3) & (HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0)))) | EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _2)) & (_6 = newAddr(alloc(_1[Heap], O_Int(_0)))))) & ((((-1 + counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)))) >= 0) & ((-1 + newAddr(alloc(_1[Heap], O_Int(_0)))) >= 0)) & (!(getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3))))) = _3) & (HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0))))) & (_4 = _3)) & \valid(val))
----- Postcondition: 
((EX Heap. ((write(_0[Heap], _9, O_Int((-2 + getInt(read(_0[Heap], _9))))) = _6) & ((counterAddr(_0[Heap]) = _9) & ((HeapObject_ctor(read(_0[Heap], _9)) = 0) & (getInt(read(_0[Heap], _9)) = (1 + getInt(read(_1, _9))))))) & (counterAddr(_0) = _8)) & ((_6 = _1) & (_7 = _2)))
----- New Postcondition: 
((EX Heap. ((write(_0[Heap], _9, O_Int((-2 + getInt(read(_0[Heap], _9))))) = _6) & ((counterAddr(_0[Heap]) = _9) & ((HeapObject_ctor(read(_0[Heap], _9)) = 0) & (getInt(read(_0[Heap], _9)) = (1 + getInt(read(_1, _9))))))) & (counterAddr(_0) = _8)) & ((_6 = _1) & (_7 = _2)))

----- Applying tricera.postprocessor.ClauseRemover$@2fdf22f7 to decrement.
----- Precondition: 
(((EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _2)) & (_6 = newAddr(alloc(_1[Heap], O_Int(_0)))))) & ((((-1 + counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)))) >= 0) & ((-1 + newAddr(alloc(_1[Heap], O_Int(_0)))) >= 0)) & ((getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3))))) = _3) & (HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0)))) | EX Heap. EX (((HeapObject_ctor(read(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (((HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0) & (write(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int((1 + getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0)))))))) = _2)) & (_6 = newAddr(alloc(_1[Heap], O_Int(_0)))))) & ((((-1 + counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)))) >= 0) & ((-1 + newAddr(alloc(_1[Heap], O_Int(_0)))) >= 0)) & (!(getInt(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), counterAddr(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3))))) = _3) & (HeapObject_ctor(read(write(newHeap(alloc(_1[Heap], O_Int(_0))), newAddr(alloc(_1[Heap], O_Int(_0))), O_Int(_3)), newAddr(alloc(_1[Heap], O_Int(_0))))) = 0))))) & (_4 = _3)) & \valid(val))
----- New Precondition: 
((_4 = _3) & \valid(val))
----- Postcondition: 
((EX Heap. ((write(_0[Heap], _9, O_Int((-2 + getInt(read(_0[Heap], _9))))) = _6) & ((counterAddr(_0[Heap]) = _9) & ((HeapObject_ctor(read(_0[Heap], _9)) = 0) & (getInt(read(_0[Heap], _9)) = (1 + getInt(read(_1, _9))))))) & (counterAddr(_0) = _8)) & ((_6 = _1) & (_7 = _2)))
----- New Postcondition: 
((_6 = _1) & (_7 = _2))

----- Applying ACSLLineariser to precondition: 
((_4 = _3) & \valid(val))
----- Result: 
 _4 == _3 && \valid(val)
----- Applying ACSLLineariser to postcondition: 
((_6 = _1) & (_7 = _2))
----- Result: 
 _6 == _1 && _7 == _2
/* contracts for decrement */
/*@
  requires val == a && \valid(val);
  ensures a_init == \old(a_init) && b_init == \old(b_init);
*/
----- Applying PointerPropProcessor to precondition of increment
----- Precondition: 
((_4 = _3) & ((((((-1 + counterAddr(_0)) >= 0) & ((-1 + _3) >= 0)) & (counterAddr(_0) = counterAddr(_0))) & ((O_Int(_1) = read(_0, counterAddr(_0))) & (HeapObject_ctor(read(_0, _3)) = 0))) | (((((-1 + counterAddr(_0)) >= 0) & ((-1 + _3) >= 0)) & (counterAddr(_0) = counterAddr(_0))) & (!(O_Int(_1) = read(_0, counterAddr(_0))) & (HeapObject_ctor(read(_0, _3)) = 0)))))
Result: 
None
----- Applying PointerPropProcessor to postcondition of increment
----- Postcondition: 
(((((HeapObject_ctor(read(_0, _4)) = 0) & (write(_0, _4, O_Int((1 + getInt(read(_0, _4))))) = _5)) & (((((-1 + counterAddr(_0)) >= 0) & ((-1 + _4) >= 0)) & ((O_Int(_6) = read(_0, counterAddr(_0))) & (HeapObject_ctor(read(_0, _4)) = 0))) | ((((-1 + counterAddr(_0)) >= 0) & ((-1 + _4) >= 0)) & (!(O_Int(_6) = read(_0, counterAddr(_0))) & (HeapObject_ctor(read(_0, _4)) = 0))))) & (_4 = _8)) & (((_6 = _1) & (_7 = _2)) & (_4 = _3)))
----- Result: 
None
----- Applying AssignmentProcessor to precondition of increment
----- Precondition: 
((_4 = _3) & ((((((-1 + counterAddr(_0)) >= 0) & ((-1 + _3) >= 0)) & (counterAddr(_0) = counterAddr(_0))) & ((O_Int(_1) = read(_0, counterAddr(_0))) & (HeapObject_ctor(read(_0, _3)) = 0))) | (((((-1 + counterAddr(_0)) >= 0) & ((-1 + _3) >= 0)) & (counterAddr(_0) = counterAddr(_0))) & (!(O_Int(_1) = read(_0, counterAddr(_0))) & (HeapObject_ctor(read(_0, _3)) = 0)))))
----- Result: 
None
----- Applying AssignmentProcessor to postcondition of increment
----- Postcondition: 
(((((HeapObject_ctor(read(_0, _4)) = 0) & (write(_0, _4, O_Int((1 + getInt(read(_0, _4))))) = _5)) & (((((-1 + counterAddr(_0)) >= 0) & ((-1 + _4) >= 0)) & ((O_Int(_6) = read(_0, counterAddr(_0))) & (HeapObject_ctor(read(_0, _4)) = 0))) | ((((-1 + counterAddr(_0)) >= 0) & ((-1 + _4) >= 0)) & (!(O_Int(_6) = read(_0, counterAddr(_0))) & (HeapObject_ctor(read(_0, _4)) = 0))))) & (_4 = _8)) & (((_6 = _1) & (_7 = _2)) & (_4 = _3)))
----- Result: 
Some((getInt(read(_5, _4)) = getInt(O_Int((1 + getInt(read(_0, _4)))))))
----- Applying tricera.postprocessor.PostconditionSimplifier$@66713605 to increment.
----- Precondition: 
((_4 = _3) & ((((((-1 + counterAddr(_0)) >= 0) & ((-1 + _3) >= 0)) & (counterAddr(_0) = counterAddr(_0))) & ((getInt(read(_0, counterAddr(_0))) = _1) & (HeapObject_ctor(read(_0, _3)) = 0))) | (((((-1 + counterAddr(_0)) >= 0) & ((-1 + _3) >= 0)) & (counterAddr(_0) = counterAddr(_0))) & (!(getInt(read(_0, counterAddr(_0))) = _1) & (HeapObject_ctor(read(_0, _3)) = 0)))))
----- New Precondition: 
((_4 = _3) & ((((((-1 + counterAddr(_0)) >= 0) & ((-1 + _3) >= 0)) & (counterAddr(_0) = counterAddr(_0))) & ((getInt(read(_0, counterAddr(_0))) = _1) & (HeapObject_ctor(read(_0, _3)) = 0))) | (((((-1 + counterAddr(_0)) >= 0) & ((-1 + _3) >= 0)) & (counterAddr(_0) = counterAddr(_0))) & (!(getInt(read(_0, counterAddr(_0))) = _1) & (HeapObject_ctor(read(_0, _3)) = 0)))))
----- Postcondition: 
(((((HeapObject_ctor(read(_0, _4)) = 0) & (write(_0, _4, O_Int((1 + getInt(read(_0, _4))))) = _5)) & (((((-1 + counterAddr(_0)) >= 0) & ((-1 + _4) >= 0)) & ((getInt(read(_0, counterAddr(_0))) = _6) & (HeapObject_ctor(read(_0, _4)) = 0))) | ((((-1 + counterAddr(_0)) >= 0) & ((-1 + _4) >= 0)) & (!(getInt(read(_0, counterAddr(_0))) = _6) & (HeapObject_ctor(read(_0, _4)) = 0))))) & (_4 = _8)) & (((_6 = _1) & (_7 = _2)) & (_4 = _3)))
----- New Postcondition: 
(((write(_0, _4, O_Int((1 + getInt(read(_0, _4))))) = _5) & (_4 = _8)) & ((_6 = _1) & (_7 = _2)))

----- Applying tricera.postprocessor.TheoryOfHeapProcessor$@37d699a1 to increment.
----- Precondition: 
((_4 = _3) & ((((((-1 + counterAddr(_0)) >= 0) & ((-1 + _3) >= 0)) & (counterAddr(_0) = counterAddr(_0))) & ((getInt(read(_0, counterAddr(_0))) = _1) & (HeapObject_ctor(read(_0, _3)) = 0))) | (((((-1 + counterAddr(_0)) >= 0) & ((-1 + _3) >= 0)) & (counterAddr(_0) = counterAddr(_0))) & (!(getInt(read(_0, counterAddr(_0))) = _1) & (HeapObject_ctor(read(_0, _3)) = 0)))))
----- New Precondition: 
((_4 = _3) & ((((((-1 + counterAddr(_0)) >= 0) & ((-1 + _3) >= 0)) & (counterAddr(_0) = counterAddr(_0))) & ((getInt(read(_0, counterAddr(_0))) = _1) & (HeapObject_ctor(read(_0, _3)) = 0))) | (((((-1 + counterAddr(_0)) >= 0) & ((-1 + _3) >= 0)) & (counterAddr(_0) = counterAddr(_0))) & (!(getInt(read(_0, counterAddr(_0))) = _1) & (HeapObject_ctor(read(_0, _3)) = 0)))))
----- Postcondition: 
((((write(_0, _4, O_Int((1 + getInt(read(_0, _4))))) = _5) & (_4 = _8)) & ((_6 = _1) & (_7 = _2))) & (getInt(read(_5, _4)) = getInt(O_Int((1 + getInt(read(_0, _4)))))))
----- New Postcondition: 
((((write(_0, _4, O_Int((1 + getInt(read(_0, _4))))) = _5) & (_4 = _8)) & ((_6 = _1) & (_7 = _2))) & (getInt(read(_5, _4)) = (1 + getInt(read(_0, _4)))))

----- Applying tricera.postprocessor.ADTSimplifier$@267ff4df to increment.
----- Precondition: 
((_4 = _3) & ((((((-1 + counterAddr(_0)) >= 0) & ((-1 + _3) >= 0)) & (counterAddr(_0) = counterAddr(_0))) & ((getInt(read(_0, counterAddr(_0))) = _1) & (HeapObject_ctor(read(_0, _3)) = 0))) | (((((-1 + counterAddr(_0)) >= 0) & ((-1 + _3) >= 0)) & (counterAddr(_0) = counterAddr(_0))) & (!(getInt(read(_0, counterAddr(_0))) = _1) & (HeapObject_ctor(read(_0, _3)) = 0)))))
----- New Precondition: 
((_4 = _3) & ((((((-1 + counterAddr(_0)) >= 0) & ((-1 + _3) >= 0)) & (counterAddr(_0) = counterAddr(_0))) & ((getInt(read(_0, counterAddr(_0))) = _1) & (HeapObject_ctor(read(_0, _3)) = 0))) | (((((-1 + counterAddr(_0)) >= 0) & ((-1 + _3) >= 0)) & (counterAddr(_0) = counterAddr(_0))) & (!(getInt(read(_0, counterAddr(_0))) = _1) & (HeapObject_ctor(read(_0, _3)) = 0)))))
----- Postcondition: 
((((write(_0, _4, O_Int((1 + getInt(read(_0, _4))))) = _5) & (_4 = _8)) & ((_6 = _1) & (_7 = _2))) & (getInt(read(_5, _4)) = (1 + getInt(read(_0, _4)))))
----- New Postcondition: 
((((write(_0, _4, O_Int((1 + getInt(read(_0, _4))))) = _5) & (_4 = _8)) & ((_6 = _1) & (_7 = _2))) & (getInt(read(_5, _4)) = (1 + getInt(read(_0, _4)))))

----- Applying tricera.postprocessor.ADTExploder$@57a667c8 to increment.
----- Precondition: 
((_4 = _3) & ((((((-1 + counterAddr(_0)) >= 0) & ((-1 + _3) >= 0)) & (counterAddr(_0) = counterAddr(_0))) & ((getInt(read(_0, counterAddr(_0))) = _1) & (HeapObject_ctor(read(_0, _3)) = 0))) | (((((-1 + counterAddr(_0)) >= 0) & ((-1 + _3) >= 0)) & (counterAddr(_0) = counterAddr(_0))) & (!(getInt(read(_0, counterAddr(_0))) = _1) & (HeapObject_ctor(read(_0, _3)) = 0)))))
----- New Precondition: 
((_4 = _3) & ((((((-1 + counterAddr(_0)) >= 0) & ((-1 + _3) >= 0)) & (counterAddr(_0) = counterAddr(_0))) & ((getInt(read(_0, counterAddr(_0))) = _1) & (HeapObject_ctor(read(_0, _3)) = 0))) | (((((-1 + counterAddr(_0)) >= 0) & ((-1 + _3) >= 0)) & (counterAddr(_0) = counterAddr(_0))) & (!(getInt(read(_0, counterAddr(_0))) = _1) & (HeapObject_ctor(read(_0, _3)) = 0)))))
----- Postcondition: 
((((write(_0, _4, O_Int((1 + getInt(read(_0, _4))))) = _5) & (_4 = _8)) & ((_6 = _1) & (_7 = _2))) & (getInt(read(_5, _4)) = (1 + getInt(read(_0, _4)))))
----- New Postcondition: 
((((write(_0, _4, O_Int((1 + getInt(read(_0, _4))))) = _5) & (_4 = _8)) & ((_6 = _1) & (_7 = _2))) & (getInt(read(_5, _4)) = (1 + getInt(read(_0, _4)))))

----- Applying tricera.postprocessor.ToVariableForm$@712cd5d3 to increment.
----- Precondition: 
((_4 = _3) & ((((((-1 + counterAddr(_0)) >= 0) & ((-1 + _3) >= 0)) & (counterAddr(_0) = counterAddr(_0))) & ((getInt(read(_0, counterAddr(_0))) = _1) & (HeapObject_ctor(read(_0, _3)) = 0))) | (((((-1 + counterAddr(_0)) >= 0) & ((-1 + _3) >= 0)) & (counterAddr(_0) = counterAddr(_0))) & (!(getInt(read(_0, counterAddr(_0))) = _1) & (HeapObject_ctor(read(_0, _3)) = 0)))))
----- New Precondition: 
((_4 = _3) & ((((((-1 + counterAddr(_0)) >= 0) & ((-1 + _4) >= 0)) & (counterAddr(_0) = counterAddr(_0))) & ((getInt(read(_0, counterAddr(_0))) = _1) & (HeapObject_ctor(read(_0, _4)) = 0))) | (((((-1 + counterAddr(_0)) >= 0) & ((-1 + _4) >= 0)) & (counterAddr(_0) = counterAddr(_0))) & (!(getInt(read(_0, counterAddr(_0))) = _1) & (HeapObject_ctor(read(_0, _4)) = 0)))))
----- Postcondition: 
((((write(_0, _4, O_Int((1 + getInt(read(_0, _4))))) = _5) & (_4 = _8)) & ((_6 = _1) & (_7 = _2))) & (getInt(read(_5, _4)) = (1 + getInt(read(_0, _4)))))
----- New Postcondition: 
((((_5 = _5) & (_4 = _8)) & ((_6 = _1) & (_7 = _2))) & (getInt(read(_5, _4)) = (1 + getInt(read(_0, _4)))))

----- Applying tricera.postprocessor.ACSLExpressionProcessor$@6eda012b to increment.
----- Precondition: 
((_4 = _3) & ((((((-1 + counterAddr(_0)) >= 0) & ((-1 + _4) >= 0)) & (counterAddr(_0) = counterAddr(_0))) & ((getInt(read(_0, counterAddr(_0))) = _1) & (HeapObject_ctor(read(_0, _4)) = 0))) | (((((-1 + counterAddr(_0)) >= 0) & ((-1 + _4) >= 0)) & (counterAddr(_0) = counterAddr(_0))) & (!(getInt(read(_0, counterAddr(_0))) = _1) & (HeapObject_ctor(read(_0, _4)) = 0)))))
----- New Precondition: 
((_4 = _3) & ((((((-1 + counterAddr(_0)) >= 0) & ((-1 + _4) >= 0)) & (counterAddr(_0) = counterAddr(_0))) & ((getInt(read(_0, counterAddr(_0))) = _1) & (HeapObject_ctor(read(_0, _4)) = 0))) | (((((-1 + counterAddr(_0)) >= 0) & ((-1 + _4) >= 0)) & (counterAddr(_0) = counterAddr(_0))) & (!(getInt(read(_0, counterAddr(_0))) = _1) & (HeapObject_ctor(read(_0, _4)) = 0)))))
----- Postcondition: 
((((_5 = _5) & (_4 = _8)) & ((_6 = _1) & (_7 = _2))) & (getInt(read(_5, _4)) = (1 + getInt(read(_0, _4)))))
----- New Postcondition: 
((((_5 = _5) & (_4 = _8)) & ((_6 = _1) & (_7 = _2))) & (deref(val) = (1 + oldDeref(val))))

----- Applying tricera.postprocessor.ClauseRemover$@2fdf22f7 to increment.
----- Precondition: 
((_4 = _3) & ((((((-1 + counterAddr(_0)) >= 0) & ((-1 + _4) >= 0)) & (counterAddr(_0) = counterAddr(_0))) & ((getInt(read(_0, counterAddr(_0))) = _1) & (HeapObject_ctor(read(_0, _4)) = 0))) | (((((-1 + counterAddr(_0)) >= 0) & ((-1 + _4) >= 0)) & (counterAddr(_0) = counterAddr(_0))) & (!(getInt(read(_0, counterAddr(_0))) = _1) & (HeapObject_ctor(read(_0, _4)) = 0)))))
----- New Precondition: 
(_4 = _3)
----- Postcondition: 
((((_5 = _5) & (_4 = _8)) & ((_6 = _1) & (_7 = _2))) & (deref(val) = (1 + oldDeref(val))))
----- New Postcondition: 
(((_4 = _8) & ((_6 = _1) & (_7 = _2))) & (deref(val) = (1 + oldDeref(val))))

----- Applying ACSLLineariser to precondition: 
(_4 = _3)
----- Result: 
 _4 == _3
----- Applying ACSLLineariser to postcondition: 
(((_4 = _8) & ((_6 = _1) & (_7 = _2))) & (deref(val) = (1 + oldDeref(val))))
----- Result: 
 _4 == _8 && _6 == _1 && _7 == _2 && *val == 1 + \old(*val)
/* contracts for increment */
/*@
  requires val == a;
  ensures \old(val) == a && a_init == \old(a_init) && b_init == \old(b_init) && *val == 1 + \old(*val);
*/
================================================================================

